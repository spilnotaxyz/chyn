[
  {
    "name": "input-erc20",
    "files": [
      {
        "name": "input-erc20.tsx",
        "dir": "components/chyn",
        "content": "import * as React from \"react\"\nimport { useSuspenseQuery } from \"@tanstack/react-query\"\nimport { parseUnits, formatUnits as viem_formatUnits } from \"viem\"\nimport { Config, ResolvedRegister, useConfig } from \"wagmi\"\nimport { GetTokenOptions, getTokenQueryOptions } from \"wagmi/query\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\n\nconst InputERC20Inner = React.forwardRef<\n  HTMLInputElement,\n  InputERC20PropsInner\n>(\n  (\n    {\n      className,\n      inputClassName,\n      address,\n      chainId,\n      formatUnits,\n      scopeKey,\n      onChange,\n      value,\n      ...props\n    },\n    ref\n  ) => {\n    const config = useConfig()\n    const options = getTokenQueryOptions(config, {\n      address,\n      chainId,\n      formatUnits,\n      scopeKey,\n    })\n    const { data: token } = useSuspenseQuery(options)\n\n    return (\n      <div\n        className={cn(\n          \"flex justify-between py-2 px-3 h-10 text-sm rounded-md border border-input bg-background ring-offset-background has-[:focus-visible]:outline-none has-[:focus-visible]:ring-2 has-[:focus-visible]:ring-ring has-[:focus-visible]:ring-offset-2 has-[:disabled]:cursor-not-allowed has-[:disabled]:opacity-50\",\n          className\n        )}\n      >\n        <input\n          type=\"number\"\n          className={cn(\n            \"min-w-0 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none bg-background placeholder:text-muted-foreground focus-visible:outline-none grow\",\n            inputClassName\n          )}\n          ref={ref}\n          onChange={(e) => {\n            onChange?.(e, parseUnits(e.target.value, token.decimals))\n          }}\n          value={value ? viem_formatUnits(value, token.decimals) : undefined}\n          {...props}\n        />\n        <div className=\"flex items-center px-2 h-full text-xs\">\n          <span className=\"text-sm select-none text-muted-foreground\">\n            {token.symbol}\n          </span>\n        </div>\n      </div>\n    )\n  }\n)\nInputERC20Inner.displayName = \"InputERC20Inner\"\n\nconst InputERC20Skeleton = React.forwardRef<\n  HTMLInputElement,\n  React.InputHTMLAttributes<HTMLInputElement> & { inputClassName?: string }\n>(({ className, inputClassName, ...props }, ref) => {\n  return (\n    <div\n      id=\"pseudo-input\"\n      className={cn(\n        \"flex justify-between py-2 px-3 h-10 text-sm rounded-md border border-input bg-background ring-offset-background has-[:focus-visible]:outline-none has-[:focus-visible]:ring-2 has-[:focus-visible]:ring-ring has-[:focus-visible]:ring-offset-2 has-[:disabled]:cursor-not-allowed has-[:disabled]:opacity-50\",\n        className\n      )}\n    >\n      <input\n        type=\"number\"\n        className={cn(\n          \"min-w-0 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none bg-background placeholder:text-muted-foreground focus-visible:outline-none grow\",\n          inputClassName\n        )}\n        disabled\n        ref={ref}\n        {...props}\n      />\n      <div className=\"flex items-center px-2 h-full text-xs\">\n        <Skeleton className=\"w-9 h-5 bg-muted-foreground\" />\n      </div>\n    </div>\n  )\n})\nInputERC20Skeleton.displayName = \"InputERC20Skeleton\"\n\nexport type InputERC20PropsInner<\n  config extends Config = ResolvedRegister[\"config\"]\n> = Omit<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  \"type\" | \"onChange\" | \"value\"\n> &\n  GetTokenOptions<config> & {\n    value?: bigint\n    onChange?: (\n      e: React.ChangeEvent<HTMLInputElement>,\n      parsedValue: bigint\n    ) => void\n    inputClassName?: string\n  }\n\nexport type InputERC20Props = InputERC20PropsInner\n\nconst InputERC20 = React.forwardRef<HTMLInputElement, InputERC20Props>(\n  (props, ref) => (\n    <React.Suspense\n      fallback={<InputERC20Skeleton placeholder={props.placeholder} />}\n    >\n      <InputERC20Inner {...props} ref={ref} />\n    </React.Suspense>\n  )\n)\n\nexport { InputERC20 }\n"
      }
    ],
    "type": "ui"
  }
]
